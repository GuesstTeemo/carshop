package cn.itcast.shop.product.dao;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import cn.itcast.shop.product.vo.Product;
import cn.itcast.shop.utils.PageHibernateCallback;

/**
 * 商品持久层的代码
 * 
 * 项目名称：shop00 类名称：ProductDao 类描述： 创建人：Teemo 创建时间：2017年4月27日 下午1:54:57 修改人：Teemo
 * 修改时间：2017年4月27日 下午1:54:57 修改备注：
 * 
 * @version
 * 
 */
public class ProductDao extends HibernateDaoSupport {

	Double priceRange = 5.0;
	

	// 首页上热门商品查询
	public List<Product> findHot() {
		// 使用离线条件查询.
		DetachedCriteria criteria = DetachedCriteria.forClass(Product.class);
		// 查询热门的商品,条件就是is_host = 1
		criteria.add(Restrictions.eq("is_hot", 1));
		// 倒序排序输出:
		criteria.addOrder(Order.desc("pdate"));
		// 执行查询:
		List<Product> list = this.getHibernateTemplate().findByCriteria(
				criteria, 0, 12);
		return list;
	}

	// 首页上最新商品的查询
	public List<Product> findNew() {
		// 使用离线条件查询:
		DetachedCriteria criteria = DetachedCriteria.forClass(Product.class);
		// 按日期进行倒序排序:
		criteria.addOrder(Order.desc("pdate"));
		// 执行查询:
		List<Product> list = this.getHibernateTemplate().findByCriteria(
				criteria, 0, 10);
		return list;
	}

	// 根据商品ID查询商品
	public Product findByPid(Integer pid) {
		return this.getHibernateTemplate().get(Product.class, pid);
	}

	// 根据商品的type进行查询商品个数
	public int findCountType(String type) {
		String hql = "select count(*) from Product p where p.type = " + ""
				+ type + "";
		List<Long> list = this.getHibernateTemplate().find(hql);
		if (list != null && list.size() > 0) {
			return list.get(0).intValue();
		}
		return 0;
	}

	// 根据商品的type进行查询商品
	public List<Product> findByType(final String type, final int begin,
			final int limit) {
		final String hql = "select p from Product p where p.type = " + ""
				+ type + "";
		List list = getHibernateTemplate().executeFind(new HibernateCallback() {
			public Object doInHibernate(Session arg0)
					throws HibernateException, SQLException {
				Query query = arg0.createQuery(hql);
				query.setFirstResult(begin);
				query.setMaxResults(limit);
				return query.list();
			}

		});

		if (list != null && list.size() > 0) {
			return list;
		}
		return null;
	}

	/*
	 * 根据商品的价格查询商品个数 2017-6-2
	 */
	public int findCountPrice(Double shop_price) {
		String hql;
		Double price = sub(shop_price, priceRange);
		if (shop_price > 40) {
			hql = "select count(*) from Product p where p.shop_price > 40";
		} else {
			hql = "select count(*) from Product p where p.shop_price between"
					+" "+ price +" "+ "and"+" " + shop_price;
		}
		List<Long> list = this.getHibernateTemplate().find(hql);
		if (list != null && list.size() > 0) {
			return list.get(0).intValue();
		}
		return 0;
	}

	// 根据商品的价格查询商品
	public List<Product> findByPrice(Double shop_price, final int begin,
			final int limit) {
		final String hql;
		Double price = sub(shop_price, priceRange);
		if (shop_price > 40) {
			hql = "select p from Product p where p.shop_price > 40";
		} else {
			hql = "select p from Product p where p.shop_price between" +" "+ price
					+" "+ "and" +" "+ shop_price;
		}

		List list = getHibernateTemplate().executeFind(new HibernateCallback() {
			public Object doInHibernate(Session arg0)
					throws HibernateException, SQLException {
				Query query = arg0.createQuery(hql);
				query.setFirstResult(begin);
				query.setMaxResults(limit);
				return query.list();
			}

		});

		if (list != null && list.size() > 0) {
			return list;
		}
		return null;
	}
	/*
	 * 2017-6-23按照时间查找
	 */
	public int findCountTime(Date date) throws ParseException {
		int timeflag = comparatime(date);
		String hql = null;
		if(timeflag == 6){
			System.out.println("6666");
			hql="select count(*) from product p where p.carDate <='2012-05-31'";
		}else if(timeflag == 5){
			System.out.println("555");
			hql="select count(*) from product p where p.carDate between '2012-06-01' and '2014-06-01'";
		}else if(timeflag == 3){
			System.out.println("333");
			hql="select count(*) from product p where p.carDate between '2014-06-01' and '2016-06-01'";
		}else if(timeflag == 1){
			System.out.println("111");
			hql="select count(*) from product p where p.carDate >='2016-06-01'";
		}
		List<Long> list = this.getHibernateTemplate().find(hql);
		if (list != null && list.size() > 0) {
			return list.get(0).intValue();
		}
		return 0;
	}

	public List<Product> findByTime(Date date, final int begin, final int limit) throws ParseException {
		int timeflag = comparatime(date);
		final String hql;
		if(timeflag == 6){
			hql="select p from product p where p.carDate <='2012-05-31'";
		}else if(timeflag == 5){
			hql="select p from product p where p.carDate between '2012-06-01' and '2014-06-01'";
		}else if(timeflag == 3){
			hql="select p from product p where p.carDate between '2014-06-01' and '2016-06-01'";
		}else if(timeflag == 1){
			hql="select p from product p where p.carDate >='2016-06-01'";
		}else{
			hql="select p from product p where p.carDate >='2016-06-01'";
		}
		List list = getHibernateTemplate().executeFind(new HibernateCallback() {
			public Object doInHibernate(Session arg0)
					throws HibernateException, SQLException {
				Query query = arg0.createQuery(hql);
				query.setFirstResult(begin);
				query.setMaxResults(limit);
				return query.list();
			}

		});

		if (list != null && list.size() > 0) {
			return list;
		}
		return null;
	}
	public int comparatime(Date date) throws ParseException{
		int flagtime=0;
		java.util.Date nowdate=new java.util.Date(); 
		String time6="2012-05-31";
		String time5="2012-06-01";
		String time3="2014-06-01";
		String time1="2016-06-01";
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.CHINA);
		Date d6 = sdf.parse(time6);
		System.out.println("d6"+d6);
		Date d5 = sdf.parse(time5);
		System.out.println("d5"+d5);
		Date d3 = sdf.parse(time3);
		System.out.println("d3"+d3);
		Date d1 = sdf.parse(time1);
		System.out.println("d1"+d1);
		boolean flag = date.before(nowdate);
		System.out.println("date.getTime()"+date.getTime());
		System.out.println("time6.getTime()"+d6.getTime());
		System.out.println("time5.getTime()"+d5.getTime());
		System.out.println("time3.getTime()"+d3.getTime());
		System.out.println("time1.getTime()"+d1.getTime());
		if(date.getTime() > d6.getTime()){
			//汽车上牌大于五年
			System.out.println("汽车上牌大于五年");
			flagtime=6;
		}else if(date.getTime()>d3.getTime() && d5.getTime()>date.getTime()){
			//汽车上牌大于3年小于五年
			System.out.println("汽车上牌大于3年小于五年");
			flagtime=5;
		}else if(date.getTime()>d1.getTime() && d3.getTime()>date.getTime()){
			//汽车上牌大于1年小于3年
			System.out.println("汽车上牌大于1年小于3年");
			flagtime=3;
		}else if(d1.getTime() > date.getTime()){
			//汽车上牌小于1年
			System.out.println("汽车上牌小于1年");
			flagtime=1;
		}else{
			System.out.println("汽车上牌大于1年小于3年*****");
			flagtime=3;
		}
		
		return flagtime;
	}
	
	
	//搜索符合条件商品的个数
	public int findCountSearch(String pname) {
		String hql = "select count(*) from Product p where p.pname like '%"+pname+"%'";
		List<Long> list = this.getHibernateTemplate().find(hql);
		if (list != null && list.size() > 0) {
			return list.get(0).intValue();
		}
		return 0;
	}
	//搜索符合条件商品的
	public List<Product> searchCar(String pname, final int begin, final int limit) {
		final String hql = "select p from Product p where p.pname like '%"+pname+"%'";
		List list = getHibernateTemplate().executeFind(new HibernateCallback() {
			public Object doInHibernate(Session arg0)
					throws HibernateException, SQLException {
				Query query = arg0.createQuery(hql);
				query.setFirstResult(begin);
				query.setMaxResults(limit);
				return query.list();
			}

		});

		if (list != null && list.size() > 0) {
			return list;
		}
		return null;
	}

	// 根据分类id查询商品的个数
	public int findCountCid(Integer cid) {
		String hql = "select count(*) from Product p where p.categorySecond.category.cid = ?";
		List<Long> list = this.getHibernateTemplate().find(hql, cid);
		if (list != null && list.size() > 0) {
			return list.get(0).intValue();
		}
		return 0;
	}

	// 根据分类id查询商品的集合
	public List<Product> findByPageCid(Integer cid, int begin, int limit) {
		// select p.* from category c,categorysecond cs,product p where c.cid =
		// cs.cid and cs.csid = p.csid and c.cid = 2
		// select p from Category c,CategorySecond cs,Product p where c.cid =
		// cs.category.cid and cs.csid = p.categorySecond.csid and c.cid = ?
		String hql = "select p from Product p join p.categorySecond cs join cs.category c where c.cid = ?";
		// 分页另一种写法:
		List<Product> list = this.getHibernateTemplate().execute(
				new PageHibernateCallback<Product>(hql, new Object[] { cid },
						begin, limit));
		if (list != null && list.size() > 0) {
			return list;
		}
		return null;

	}

	// 根据二级分类查询商品个数
	public int findCountCsid(Integer csid) {
		String hql = "select count(*) from Product p where p.categorySecond.csid = ?";
		List<Long> list = this.getHibernateTemplate().find(hql, csid);
		if (list != null && list.size() > 0) {
			return list.get(0).intValue();
		}
		return 0;
	}

	// 根据二级分类查询商品信息
	public List<Product> findByPageCsid(Integer csid, int begin, int limit) {
		String hql = "select p from Product p join p.categorySecond cs where cs.csid = ?";
		List<Product> list = this.getHibernateTemplate().execute(
				new PageHibernateCallback<Product>(hql, new Object[] { csid },
						begin, limit));
		if (list != null && list.size() > 0) {
			return list;
		}
		return null;
	}

	// 后台统计商品个数的方法
	public int findCount() {
		String hql = "select count(*) from Product";
		List<Long> list = this.getHibernateTemplate().find(hql);
		if (list != null && list.size() > 0) {
			return list.get(0).intValue();
		}
		return 0;
	}

	// 后台查询所有商品的方法
	public List<Product> findByPage(int begin, int limit) {
		String hql = "from Product order by pdate desc";
		List<Product> list = this.getHibernateTemplate().execute(
				new PageHibernateCallback<Product>(hql, null, begin, limit));
		if (list != null && list.size() > 0) {
			return list;
		}
		return null;
	}

	// DAO中的保存商品的方法
	public void save(Product product) {
		this.getHibernateTemplate().save(product);
	}

	// DAO中的删除商品的方法
	public void delete(Product product) {
		this.getHibernateTemplate().delete(product);
	}

	public void update(Product product) {
		this.getHibernateTemplate().update(product);
	}

	public double sub(double d1, double d2) {
		BigDecimal bd1 = new BigDecimal(Double.toString(d1));
		BigDecimal bd2 = new BigDecimal(Double.toString(d2));
		return bd1.subtract(bd2).doubleValue();
	}

	public int findCountMany() {
		// TODO Auto-generated method stub
		return 0;
	}

	public List<Product> findByPageMany(int begin, int limit) {
		// TODO Auto-generated method stub
		return null;
	}

	

	

	

}
