package cn.itcast.shop.user.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.sql.SQLException;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.ServletActionContext;
import org.springframework.web.bind.annotation.RequestMapping;

import cn.itcast.shop.user.service.UserService;
import cn.itcast.shop.user.vo.User;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;

/**
 * 用户模块Action的类
 * 
 * 项目名称：shop00 类名称：UserAction 类描述： 创建人：Teemo 创建时间：2017年4月18日 上午11:16:58
 * 修改人：Teemo 修改时间：2017年4月18日 上午11:16:58 修改备注：
 * 
 * @version
 * 
 */
public class UserAction extends ActionSupport implements ModelDriven<User> {
	// 模型驱动使用的对象
	private User user = new User();

	public User getModel() {
		return user;
	}

	private String Code;

	public void setCode(String code) {
		Code = code;
	}
	CheckCodeAction code1 = new CheckCodeAction();
	
	// 接收验证码:
//	 private String checkcode;
//	
//	 public void setCheckcode(String checkcode) {
//	 this.checkcode = checkcode;
//	 }
	// 注入UserService
	private UserService userService;

	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * 跳转到注册页面的执行方法
	 */
	public String registPage() {
		// Struts.xml-配置用户模块的Action-result name
		return "registPage";
	}

	/**
	 * AJAX进行异步校验用户名的执行方法
	 * 
	 * @throws IOException
	 */
	public String findByName() throws IOException {
		// 调用Service进行查询:
		User existUser = userService.findByUsername(user.getUsername());
		// 获得response对象,向页面输出:
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html;charset=UTF-8");
		// 判断
		if (existUser != null) {
			// 查询到该用户:用户名已经存在
			response.getWriter().println("<font color='red'>用户名已经存在</font>");
		} else {
			// 没查询到该用户:用户名可以使用
			response.getWriter().println("<font color='green'>用户名可以使用</font>");
		}
		// 因为ajax所以不需要跳转
		return NONE;
	}

	/**
	 * 用户注册的方法:
	 */
	public String regist() {
		// 判断验证码程序:
		// 从session中获得验证码的随机值:
		// String checkcode1 = (String) ServletActionContext.getRequest()
		// .getSession().getAttribute("checkcode");
		// if(!checkcode.equalsIgnoreCase(checkcode1)){
		// this.addActionError("验证码输入错误!");
		// return "checkcodeFail";
		// }
		System.out.println("---------------------------------------------------"+Code);
		for (int i = 0; i < 10; i++) {
			String[] ipandcode = code1.ipcode[i].split("&");
			System.out.println("checkip=" + ipandcode[0]);
			System.out.println("checkcode---------------------------=" + ipandcode[1]);
			if (Code.equals(ipandcode[1])) {// 短信验证码成功
				userService.save(user);
				this.addActionMessage("注册成功!");
				return "msg";
			}
		}
		this.addActionMessage("注册失败!");
		return "checkcodeFail";
	}

	
	/**
	 * 用户激活的方法
	 */
	// public String active() {
	// // 根据激活码查询用户:
	// User existUser = userService.findByCode(user.getCode());
	// // 判断
	// if (existUser == null) {
	// // 激活码错误的
	// this.addActionMessage("激活失败:激活码错误!");
	// } else {
	// // 激活成功
	// // 修改用户的状态
	// existUser.setState(1);
	// existUser.setCode(null);
	// userService.update(existUser);
	// this.addActionMessage("激活成功:请去登录!");
	// }
	// return "msg";
	// }

	/**
	 * 跳转到登录页面
	 */
	public String loginPage() {
		return "loginPage";
	}

	/**
	 * 登录的方法
	 */
	public String login() {
		User existUser = userService.login(user);
		// 判断
		if (existUser == null) {
			// 登录失败
			this.addActionError("登录失败:用户名或密码错误!");
			return LOGIN;
		} else {
			// 登录成功
			// 将用户的信息存入到session中
			ServletActionContext.getRequest().getSession()
					.setAttribute("existUser", existUser);
			// 页面跳转
			return "loginSuccess";
		}

	}

	/**
	 * 用户退出的方法
	 */
	public String quit() {
		// 销毁session
		ServletActionContext.getRequest().getSession().invalidate();
		return "quit";
	}

}
